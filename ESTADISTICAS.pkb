CREATE OR REPLACE PACKAGE BODY MARIO.ESTADISTICAS 
IS
    --RELLENAR UNA SELECT CON POWER-UPS
    FUNCTION LISTAR_POWER_UPS RETURN SYS_REFCURSOR
    IS
        A_OBJETOS SYS_REFCURSOR;
    BEGIN 
        OPEN A_OBJETOS FOR
        SELECT * FROM OBJETOS O
        WHERE EXISTS (SELECT 'X' FROM POWER_UPS P 
                        WHERE P.CODIGO_OBJETO = O.CODIGO)
        ORDER BY NOMBRE;
        
        RETURN A_OBJETOS;
    EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'ERROR: ' || SQLERRM);
    END LISTAR_POWER_UPS;
    
    --MOSTRAR UN LISTADO DE AVENTURAS EN LAS QUE SE ENCUENTRA CIERTO OBJETO (ESTADÍSTICA I)
    PROCEDURE AVENTURAS_DE_OBJETO(V_CODIGO_OBJETO OBJETOS.CODIGO%TYPE, C_AVENTURAS_SALIDA OUT CURSOR_DATOS)
    IS
        A_PAISES ARRAY_DATOS;
        V_PAIES VARCHAR2(1000);
        N_CALIFICACION_MEDIA PAISES.CRITICA%TYPE;
        N_CALIFICACION PAISES.CRITICA%TYPE;
        NUM_PAISES_CAL NUMBER;
        A_PLATAFORMAS ARRAY_DATOS;
        V_PLATAFORMAS VARCHAR2(500);
        
        R_AVENTURA TMP_AVENTURAS_LISTADO%ROWTYPE;
        CURSOR C_AVENTURAS IS 
            SELECT DISTINCT TITULO_AVENTURA FROM ENCONTRARSE_EN 
            WHERE CODIGO_OBJETO = V_CODIGO_OBJETO;
        V_TITULO_AVENTURA AVENTURAS.TITULO%TYPE;
    BEGIN
        OPEN C_AVENTURAS;
        
        FETCH C_AVENTURAS INTO V_TITULO_AVENTURA;
        WHILE(C_AVENTURAS%FOUND) LOOP
            --TITULO
            R_AVENTURA.TITULO := V_TITULO_AVENTURA;
            
            --LISTA DE PAISES Y NÚMERO DE LOS QUE TIENEN CALIFICACIÓN SUPERIOR A LA MEDIA
            BEGIN
                SELECT DISTINCT NOMBRE_PAIS BULK COLLECT INTO A_PAISES
                FROM SALIR_EN
                WHERE TITULO_AVENTURA = V_TITULO_AVENTURA;
                SELECT AVG(CRITICA) INTO N_CALIFICACION_MEDIA FROM PAISES;
                V_PAIES := '';
                NUM_PAISES_CAL := 0;
                
                V_PAIES := A_PAISES(1);
                FOR INDICE_ARRAY IN 2..A_PAISES.COUNT LOOP
                    V_PAIES := V_PAIES || ',' || A_PAISES(INDICE_ARRAY);
                    SELECT CRITICA INTO N_CALIFICACION FROM PAISES 
                    WHERE NOMBRE = A_PAISES(INDICE_ARRAY);
                    
                    IF(N_CALIFICACION > N_CALIFICACION_MEDIA) THEN
                        NUM_PAISES_CAL := NUM_PAISES_CAL + 1;
                    END IF;
                END LOOP;
                
                R_AVENTURA.PAISES_LISTA := V_PAIES;
                R_AVENTURA.PAISES_CAL_SUP := NUM_PAISES_CAL;
            EXCEPTION
                WHEN OTHERS THEN
                    R_AVENTURA.PAISES_LISTA := '';
                    R_AVENTURA.PAISES_CAL_SUP := 0;
            END;
            
            --LISTA DE PLATAFORMAS
            BEGIN
                SELECT NOMBRE_PLATAFORMA BULK COLLECT INTO A_PLATAFORMAS
                FROM CREARSE_PARA
                WHERE TITULO_AVENTURA = V_TITULO_AVENTURA;
                V_PLATAFORMAS := '';
                V_PLATAFORMAS := A_PLATAFORMAS(1);
                
                FOR INDICE_ARRAY IN 2..A_PLATAFORMAS.COUNT LOOP
                    V_PLATAFORMAS := V_PLATAFORMAS || ',' || A_PLATAFORMAS(INDICE_ARRAY);
                END LOOP;
                
                R_AVENTURA.PLATAFORMAS_LISTA := V_PLATAFORMAS;
            EXCEPTION
                WHEN OTHERS THEN
                    R_AVENTURA.PLATAFORMAS_LISTA := '';
            END;
            
            --CANTIDAD DE MUNDOS Y NIVELES
            BEGIN
                SELECT COUNT(DISTINCT NUMERO_MUNDO), COUNT(*) INTO R_AVENTURA.CANTIDAD_MUNDOS , R_AVENTURA.CANTIDAD_NIVELES
                FROM NIVELES
                WHERE TITULO_AVENTURA = V_TITULO_AVENTURA;
            EXCEPTION
                WHEN OTHERS THEN
                    R_AVENTURA.CANTIDAD_MUNDOS := 0;
                    R_AVENTURA.CANTIDAD_NIVELES := 0;
            END;
            
            --CANTIDAD ALIADOS Y ENEMIGOS
            BEGIN
                SELECT NVL(SUM(CASE WHEN BANDO = 'B' THEN 1 ELSE 0 END),0), 
                    NVL(SUM(CASE WHEN BANDO = 'M' THEN 1 ELSE 0 END),0) 
                INTO R_AVENTURA.NUMERO_ALIADOS, R_AVENTURA.NUMERO_ENEMIGOS 
                FROM APARECER WHERE TITULO_AVENTURA = V_TITULO_AVENTURA;
            EXCEPTION
                WHEN OTHERS THEN
                    R_AVENTURA.NUMERO_ALIADOS := 0;
                    R_AVENTURA.NUMERO_ENEMIGOS := 0;
            END;
            
            --INSERTAR AVENTURA EN TABLA TEMPORAL
            INSERT INTO TMP_AVENTURAS_LISTADO VALUES R_AVENTURA;
            FETCH C_AVENTURAS INTO V_TITULO_AVENTURA;
        END LOOP;
        
        CLOSE C_AVENTURAS;
        --"DEVOLVER" CURSOR CON RESULTADOS OBTENIDOS
        OPEN C_AVENTURAS_SALIDA FOR SELECT * FROM TMP_AVENTURAS_LISTADO ORDER BY TITULO;
        DELETE TMP_AVENTURAS_LISTADO;
    EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'ERROR: ' || SQLERRM);
    END AVENTURAS_DE_OBJETO;
    
    --RELLENAR UNA SELECT CON AVENTURAS
    FUNCTION LISTAR_AVENTURAS RETURN ARRAY_DATOS
    IS
        A_AVENTURAS ARRAY_DATOS;
    BEGIN
        SELECT TITULO BULK COLLECT INTO A_AVENTURAS FROM AVENTURAS ORDER BY TITULO;
        RETURN A_AVENTURAS;
    EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'ERROR: ' || SQLERRM);
    END;
    
    --OBTENCIÓN DEL PORCENTAJE DE APARICIÓN DE LOS OBJETOS DE CIERTA AVENTURA (ESTADÍSTICA I, PARTE II)
    PROCEDURE APARICIONES_OBJETOS(V_TIT_AVEN AVENTURAS.TITULO%TYPE, 
        A_PORCENTAJES OUT ARRAY_DATOS, A_OBJETOS OUT ARRAY_DATOS)
    IS
        CANTIDAD_TOTAL NUMBER;
    BEGIN
        SELECT SUM(CANTIDAD) INTO CANTIDAD_TOTAL FROM ENCONTRARSE_EN E
        WHERE TITULO_AVENTURA = V_TIT_AVEN;
                    
        SELECT ROUND((SUM(CANTIDAD) / CANTIDAD_TOTAL) * 100, 2) PORCENTAJE, O.NOMBRE 
        BULK COLLECT INTO A_PORCENTAJES, A_OBJETOS FROM ENCONTRARSE_EN E, OBJETOS O
        WHERE E.CODIGO_OBJETO = O.CODIGO AND 
            E.TITULO_AVENTURA = V_TIT_AVEN AND
            EXISTS(SELECT 'X' FROM POWER_UPS P 
                    WHERE P.CODIGO_OBJETO = O.CODIGO)
        GROUP BY O.CODIGO, O.NOMBRE
        ORDER BY PORCENTAJE DESC;
    EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'ERROR: ' || SQLERRM);
    END APARICIONES_OBJETOS;
    
    --RELLENAR UNA SELECT CON PERSONAJES
    FUNCTION LISTAR_PERSONAJES RETURN SYS_REFCURSOR
    IS
        A_PERSONAJES SYS_REFCURSOR;
    BEGIN 
        OPEN A_PERSONAJES FOR
        SELECT * FROM PERSONAJES
        ORDER BY NOMBRE_ESP;
        
        RETURN A_PERSONAJES;
    EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'ERROR: ' || SQLERRM);
    END LISTAR_PERSONAJES;
    
    --OBTENCIÓN DEL LISTADO DE AVENTURAS DE CIERTO PERSONAJE Y LOS OBJETOS COMPATIBLES EN LA MISMA (ESTADÍSTICA II, OPCIÓN II)
    PROCEDURE LISTA_PERS_OBJ_COMPAT(V_PERSONAJE PERSONAJES.NOMBRE_JAP%TYPE, C_DATOS_DEVUELTOS OUT CURSOR_DATOS)
    IS
        R_TABLA_TEMP TMP_OBJETOS_COMPATIBLES%ROWTYPE;
        V_OBJETO TMP_OBJETOS_COMPATIBLES.OBJETOS_COMPATIBLES%TYPE;
        CURSOR C_AVENTURAS IS SELECT TITULO FROM AVENTURAS 
        WHERE EXISTS(SELECT 'X' FROM APARECER 
                    WHERE NOMBRE_PERSONAJE = V_PERSONAJE 
                        AND TITULO_AVENTURA = TITULO);
        CURSOR C_OBJETOS IS SELECT '(' || CODIGO || ') ' || NOMBRE FROM OBJETOS O 
        WHERE EXISTS(SELECT 'X' FROM SER_COMPATIBLE S 
                    WHERE S.CODIGO_OBJETO_BENEFICIOSO = O.CODIGO 
                        AND S.TITULO_AVENTURA = R_TABLA_TEMP.TITULO_AVENTURA
                        AND S.NOMBRE_PERSONAJE = V_PERSONAJE)
        ORDER BY NOMBRE;
    BEGIN
        OPEN C_AVENTURAS;

        FETCH C_AVENTURAS INTO R_TABLA_TEMP.TITULO_AVENTURA;
        WHILE C_AVENTURAS%FOUND LOOP
            OPEN C_OBJETOS;
            
                V_OBJETO := '';
                FETCH C_OBJETOS INTO R_TABLA_TEMP.OBJETOS_COMPATIBLES;
                WHILE C_OBJETOS%FOUND LOOP
                    V_OBJETO := V_OBJETO || ',' || R_TABLA_TEMP.OBJETOS_COMPATIBLES;
                    FETCH C_OBJETOS INTO R_TABLA_TEMP.OBJETOS_COMPATIBLES;
                END LOOP;
                
            CLOSE C_OBJETOS;
                
            IF(LENGTH(V_OBJETO) > 0) THEN
                V_OBJETO := SUBSTR(V_OBJETO, 2);
            END IF;
            R_TABLA_TEMP.OBJETOS_COMPATIBLES := V_OBJETO;
            
            INSERT INTO TMP_OBJETOS_COMPATIBLES VALUES R_TABLA_TEMP;
            FETCH C_AVENTURAS INTO R_TABLA_TEMP.TITULO_AVENTURA;
        END LOOP;

        CLOSE C_AVENTURAS;
        OPEN C_DATOS_DEVUELTOS FOR SELECT * FROM TMP_OBJETOS_COMPATIBLES ORDER BY TITULO_AVENTURA;
    EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'ERROR: ' || SQLERRM);
    END LISTA_PERS_OBJ_COMPAT;
    
    --OBTENCIÓN DEL LISTADO DE OBJETOS QUE SON COMPATIBLES PARA CIERTO PERSONAJE A LO LARGO DE LA SAGA (ESTADÍSTICA II, OPCIÓN I)
    PROCEDURE LISTA_PER_OBJ_HAB(V_PERSONAJE PERSONAJES.NOMBRE_JAP%TYPE, C_DATOS_DEVUELTOS OUT CURSOR_DATOS)
    IS
        CURSOR C_OBJETOS(V_NOMBRE_PERSONAJE PERSONAJES.NOMBRE_JAP%TYPE) 
        IS 
        SELECT DISTINCT CODIGO_OBJETO_BENEFICIOSO, NOMBRE
        FROM SER_COMPATIBLE S, OBJETOS O
        WHERE S.CODIGO_OBJETO_BENEFICIOSO = O.CODIGO AND
            NOMBRE_PERSONAJE = V_NOMBRE_PERSONAJE;
        R_OBJETO C_OBJETOS%ROWTYPE;
        CURSOR C_HABILIDADES(V_CODIGO_OBJETO OBJETOS.CODIGO%TYPE) 
        IS 
        SELECT NOMBRE_HABILIDAD || ' (NIVEL: ' || IMPLEMENTACION || ')'
        FROM PROPORCIONAR 
        WHERE CODIGO_OBJETO_BENEFICIOSO = V_CODIGO_OBJETO;
        V_HABILIDAD VARCHAR2(75);
        R_RESULTADO TMP_OBJETOS_HAB%ROWTYPE;
    BEGIN
        OPEN C_OBJETOS(V_PERSONAJE);
        
        FETCH C_OBJETOS INTO R_OBJETO;
        WHILE C_OBJETOS%FOUND LOOP
            R_RESULTADO.COD_NOMBRE := '(' || R_OBJETO.CODIGO_OBJETO_BENEFICIOSO || ') ' || R_OBJETO.NOMBRE;
            R_RESULTADO.HABILIDADES := '';
            
            OPEN C_HABILIDADES(R_OBJETO.CODIGO_OBJETO_BENEFICIOSO);
            
            FETCH C_HABILIDADES INTO V_HABILIDAD;
            WHILE C_HABILIDADES%FOUND LOOP
                R_RESULTADO.HABILIDADES := R_RESULTADO.HABILIDADES || ',' || V_HABILIDAD;
                FETCH C_HABILIDADES INTO V_HABILIDAD;
            END LOOP;
            
            CLOSE C_HABILIDADES;
            
            IF LENGTH(R_RESULTADO.HABILIDADES) > 0 THEN
                R_RESULTADO.HABILIDADES := SUBSTR(R_RESULTADO.HABILIDADES, 2);
            END IF;
            INSERT INTO TMP_OBJETOS_HAB VALUES R_RESULTADO;
            FETCH C_OBJETOS INTO R_OBJETO;
        END LOOP;
        
        CLOSE C_OBJETOS;
        OPEN C_DATOS_DEVUELTOS FOR SELECT * FROM TMP_OBJETOS_HAB ORDER BY COD_NOMBRE;
    EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'ERROR: ' || SQLERRM);
    END LISTA_PER_OBJ_HAB;

    --DEVOLVER LAS AVENTURAS COINCIDENTES A LOS PARAMETRSO DE BÚSQUEDA RELLENADOS (ESTADÍSTICA III)
    PROCEDURE BUSCAR_AVENTURA(V_SUBCADENA VARCHAR2, V_CADENA_BUSQUEDA VARCHAR2, 
        N_ANYO_MIN NUMBER, N_ANYO_MAX NUMBER, V_TITULO_REMAKE AVENTURAS.TITULO_REMAKE%TYPE, 
        V_POWER_UP POWER_UPS.CODIGO_OBJETO%TYPE, V_PERSONAJE PERSONAJES.NOMBRE_JAP%TYPE,
        N_FILA_INICIO NUMBER, N_NUM_REGISTROS NUMBER, C_DATOS_DEVUELTOS OUT CURSOR_DATOS, COINCIDENCIAS OUT NUMBER)
    IS
        SENTENCIA VARCHAR2(400) DEFAULT 'SELECT * FROM AVENTURAS A';
        CONDICIONES ARRAY_DATOS;
        C_AVENTURAS CURSOR_DATOS;
        R_AVENTURA_BUSQUEDA TMP_AVENTURAS_BUSQUEDA%ROWTYPE;
        A_REGISTROS ARRAY_DATOS;
    BEGIN
        DELETE TMP_AVENTURAS_BUSQUEDA;
        --SELECCIONAMOS LAS CONDICIONES NECESARIAS
        IF V_SUBCADENA IS NOT NULL THEN 
            CONDICIONES(CONDICIONES.COUNT + 1) := 'UPPER(' || V_CADENA_BUSQUEDA || ') LIKE ''%' || UPPER(V_SUBCADENA) || '%''';
        END IF;
        IF N_ANYO_MIN IS NOT NULL THEN 
            CONDICIONES(CONDICIONES.COUNT + 1) := 'ANYO >= ' || N_ANYO_MIN;
        END IF;
        IF N_ANYO_MAX IS NOT NULL THEN 
            CONDICIONES(CONDICIONES.COUNT + 1) := 'ANYO <= ' || N_ANYO_MAX;
        END IF;
        IF V_TITULO_REMAKE IS NOT NULL THEN 
            CONDICIONES(CONDICIONES.COUNT + 1) := 'TITULO_REMAKE = ''' || V_TITULO_REMAKE || '''';
        END IF;
        IF V_POWER_UP IS NOT NULL THEN 
            CONDICIONES(CONDICIONES.COUNT + 1) := 'EXISTS (SELECT ''X'' FROM ENCONTRARSE_EN E WHERE E.TITULO_AVENTURA = A.TITULO AND E.CODIGO_OBJETO = ''' || V_POWER_UP || ''')';
        END IF;
        IF V_PERSONAJE IS NOT NULL THEN 
            CONDICIONES(CONDICIONES.COUNT + 1) := 'EXISTS (SELECT ''X'' FROM APARECER P WHERE P.TITULO_AVENTURA = A.TITULO AND P.NOMBRE_PERSONAJE = ''' || V_PERSONAJE || ''')';
        END IF;
        
        --MONTAMOS LA SENTENCIA
        IF CONDICIONES.COUNT > 0 THEN
            SENTENCIA := SENTENCIA || ' WHERE ' || CONDICIONES(1);
            FOR INDICE IN 2..CONDICIONES.COUNT LOOP
                SENTENCIA := SENTENCIA || ' AND ' || CONDICIONES(INDICE);
            END LOOP;
        END IF;
        
        --RECOLECTAMOS LA INFORMACION DE CADA AVENTURA RESULTANTE
        OPEN C_AVENTURAS FOR SENTENCIA;
        COINCIDENCIAS := 0;
        
        FETCH C_AVENTURAS INTO R_AVENTURA_BUSQUEDA.TITULO_AVENTURA, 
            R_AVENTURA_BUSQUEDA.PORTADA, R_AVENTURA_BUSQUEDA.ANYO, 
            R_AVENTURA_BUSQUEDA.DESCRIPCION, R_AVENTURA_BUSQUEDA.OBJETIVO, 
            R_AVENTURA_BUSQUEDA.IMPLEMENTACION, R_AVENTURA_BUSQUEDA.TITULO_REMAKE;
        WHILE C_AVENTURAS%FOUND LOOP
            --OBTENCION DE PLATAFORMAS
            SELECT P.NOMBRE || ' (' || P.POTENCIA || 'MHz)' 
            BULK COLLECT INTO A_REGISTROS 
            FROM CREARSE_PARA C, PLATAFORMAS P 
            WHERE C.TITULO_AVENTURA = R_AVENTURA_BUSQUEDA.TITULO_AVENTURA 
                AND P.NOMBRE = C.NOMBRE_PLATAFORMA;
                
            R_AVENTURA_BUSQUEDA.PLATAFORMAS_LISTA := '';
            FOR I IN 1..A_REGISTROS.COUNT LOOP
                R_AVENTURA_BUSQUEDA.PLATAFORMAS_LISTA := R_AVENTURA_BUSQUEDA.PLATAFORMAS_LISTA || ';' || A_REGISTROS(I);
            END LOOP;
            
            IF LENGTH(R_AVENTURA_BUSQUEDA.PLATAFORMAS_LISTA) > 0 THEN
                R_AVENTURA_BUSQUEDA.PLATAFORMAS_LISTA := SUBSTR(R_AVENTURA_BUSQUEDA.PLATAFORMAS_LISTA, 2);
            END IF;
            
            --OBTENCION DE PERSONAJES
            SELECT DISTINCT P.NOMBRE_ESP || ' (' || 
                CASE WHEN P.BONDAD = 'B' THEN 'ALIADO' 
                    WHEN P.BONDAD = 'M' THEN 'ENEMIGO' 
                    ELSE 'DESCONOCIDO' END || ')'
            BULK COLLECT INTO A_REGISTROS 
            FROM APARECER A, PERSONAJES P
            WHERE A.TITULO_AVENTURA = R_AVENTURA_BUSQUEDA.TITULO_AVENTURA 
                AND P.NOMBRE_JAP = A.NOMBRE_PERSONAJE;
                
            R_AVENTURA_BUSQUEDA.PERSONAJES_LISTA := '';
            FOR I IN 1..A_REGISTROS.COUNT LOOP
                R_AVENTURA_BUSQUEDA.PERSONAJES_LISTA := R_AVENTURA_BUSQUEDA.PERSONAJES_LISTA || ';' || A_REGISTROS(I);
            END LOOP;
            
            IF LENGTH(R_AVENTURA_BUSQUEDA.PERSONAJES_LISTA) > 0 THEN
                R_AVENTURA_BUSQUEDA.PERSONAJES_LISTA := SUBSTR(R_AVENTURA_BUSQUEDA.PERSONAJES_LISTA, 2);
            END IF;
            
            --OBTENCION DE OBJETOS
            SELECT DISTINCT '(' || O.CODIGO || ') ' || O.NOMBRE
            BULK COLLECT INTO A_REGISTROS 
            FROM ENCONTRARSE_EN E, OBJETOS O
            WHERE E.TITULO_AVENTURA = R_AVENTURA_BUSQUEDA.TITULO_AVENTURA 
                AND O.CODIGO = E.CODIGO_OBJETO;
                
            R_AVENTURA_BUSQUEDA.OBJETOS_LISTA := '';
            FOR I IN 1..A_REGISTROS.COUNT LOOP
                R_AVENTURA_BUSQUEDA.OBJETOS_LISTA := R_AVENTURA_BUSQUEDA.OBJETOS_LISTA || ';' || A_REGISTROS(I);
            END LOOP;
            
            IF LENGTH(R_AVENTURA_BUSQUEDA.OBJETOS_LISTA) > 0 THEN
                R_AVENTURA_BUSQUEDA.OBJETOS_LISTA := SUBSTR(R_AVENTURA_BUSQUEDA.OBJETOS_LISTA, 2);
            END IF;
            
            --INSERTAMOS RESULTADO EN LA TABLA TEMPORAL DE COINCIDENCIAS
            INSERT INTO TMP_AVENTURAS_BUSQUEDA VALUES R_AVENTURA_BUSQUEDA;
            
            COINCIDENCIAS := COINCIDENCIAS + 1;
            FETCH C_AVENTURAS INTO R_AVENTURA_BUSQUEDA.TITULO_AVENTURA, 
                R_AVENTURA_BUSQUEDA.PORTADA, R_AVENTURA_BUSQUEDA.ANYO, 
                R_AVENTURA_BUSQUEDA.DESCRIPCION, R_AVENTURA_BUSQUEDA.OBJETIVO, 
                R_AVENTURA_BUSQUEDA.IMPLEMENTACION, R_AVENTURA_BUSQUEDA.TITULO_REMAKE;
        END LOOP;
        
        CLOSE C_AVENTURAS;
        
        --ASIGNAR UN IDENTIFICADOR DE ORDEN A LOS REGISTROS
        UPDATE TMP_AVENTURAS_BUSQUEDA T1 
        SET INDICE_ORDEN = (SELECT ORDEN 
                            FROM (SELECT ROWNUM ORDEN, TITULO
                                    FROM (SELECT TITULO_AVENTURA  TITULO
                                        FROM TMP_AVENTURAS_BUSQUEDA
                                        ORDER BY ANYO, TITULO))LISTA_ORDENADA
                            WHERE TITULO = T1.TITULO_AVENTURA);
        
        --DELOVEMOS RESULTADOS CON LOS DATOS DEL PAGINADOR
        OPEN C_DATOS_DEVUELTOS 
        FOR 
        SELECT * FROM TMP_AVENTURAS_BUSQUEDA
        WHERE INDICE_ORDEN >= NVL(N_FILA_INICIO, 1) 
            AND INDICE_ORDEN < (NVL(N_FILA_INICIO, 1) + NVL(N_NUM_REGISTROS, 4))
        ORDER BY ANYO;
    EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'ERROR: ' || SQLERRM);
    END BUSCAR_AVENTURA;
END ESTADISTICAS;
/